---
import Layout from '../layouts/Layout.astro'
---

<Layout title="Stephen Sterling - About Me">
    <!-- Section: About Me Hero -->
    <div
        id="hero-section"
        class="aurora-bg aurora-orange flex w-full flex-col items-center justify-center text-center"
    >
        <div class="max-w-4xl">
            <h1
                class="font-poppins fade-in-up text-6xl font-bold leading-tight text-white md:text-8xl lg:text-9xl"
            >
                Hello<span class="gradient-text-orange">.</span>
            </h1>
            <p
                class="fade-in mx-auto mt-6 max-w-2xl px-1 text-xl text-gray-400 md:text-2xl"
            >
                Behind every line of code is a story. <br /> This is mine.
            </p>
        </div>
        <div class="absolute bottom-24">
            <a href="#my-goals" aria-label="Scroll to next section">
                <svg
                    class="animate-bounce-slow h-8 w-8 text-gray-300"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                    ><path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"></path></svg
                >
            </a>
        </div>
    </div>

    <!-- Section: My Goals -->
    <section id="my-goals">
        <div
            class="flex w-full items-center justify-center px-4 py-24"
            style="background-image: radial-gradient(ellipse at top, rgba(249, 115, 22, 0.1), transparent 70%);"
        >
            <div class="container mx-auto">
                <div class="mb-24 text-center">
                    <h2
                        class="font-poppins text-3xl font-bold text-white md:text-5xl"
                    >
                        My Mission & Goals
                    </h2>
                    <p class="mt-4 text-lg text-gray-400">
                        What drives me forward.
                    </p>
                </div>
                <div
                    class="relative mx-auto flex max-w-5xl flex-col items-center justify-center gap-8 lg:flex-row lg:gap-0"
                >
                    <!-- Card 1 (Back) -->
                    <div
                        class="glass-pane w-full transform rounded-2xl p-8 shadow-2xl hover:border-orange-500/50 lg:w-3/5 lg:-rotate-3 lg:p-12 lg:blur-sm hover:lg:z-20 hover:lg:scale-105 hover:lg:blur-0"
                    >
                        <h3 class="font-poppins text-2xl text-orange-400">
                            Be a Part of Something Bigger
                        </h3>
                        <div class="mb-4 mt-3 h-1 w-16 rounded bg-orange-500">
                        </div>
                        <p class="mt-2 text-base">
                            My goal as a developer is to be part of something
                            bigger. I'm driven to apply my skills to large-scale
                            projects, whether it's an expansive game, robust
                            software, or a user-friendly website. I want to
                            build applications that are valuable, intuitive, and
                            integrate seamlessly into people's daily lives,
                            leaving a lasting and positive impact.
                        </p>
                    </div>

                    <!-- Card 2 (Front) -->
                    <div
                        class="glass-pane relative z-10 w-full transform rounded-2xl p-8 shadow-2xl hover:border-orange-500/50 lg:ml-[-10rem] lg:w-3/5 lg:rotate-2 lg:p-12 hover:lg:scale-105"
                    >
                        <h3 class="font-poppins text-2xl text-orange-400">
                            Never Stop Growing
                        </h3>
                        <div class="mb-4 mt-3 h-1 w-16 rounded bg-orange-500">
                        </div>
                        <p class="mt-2 text-base">
                            I am committed to a career of continuous growth. I
                            love diving into new concepts, mastering different
                            languages, and exploring the latest software tools.
                            This passion for learning is fueled by my goal to
                            collaborate with talented teams on challenging
                            projects that push my abilities and force me to
                            discover new ways of thinking and building.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Section: Narrative -->
    <section>
        <!-- Section Background -->
        <div
            class="gradient-effect-bg flex min-h-screen w-full items-center justify-center bg-black/20 p-8"
        >
            <!-- Content Container -->
            <div class="container mx-auto pb-32">
                <!-- Main Heading -->
                <h2
                    class="font-poppins my-8 pb-4 text-left text-3xl font-bold text-white md:text-6xl"
                >
                    From Curiosity to Creation.
                </h2>

                <!-- Two-Column Layout (On Larger Screens) -->
                <div
                    class="mt-12 grid grid-cols-1 gap-8 md:grid-cols-[0.9fr_0.1fr]"
                >
                    <!-- Left Column: The Narrative -->
                    <div
                        class="text-md space-y-6 leading-relaxed text-gray-300 md:text-lg"
                    >
                        <p class="drop-cap">
                            My journey into technology didn’t start with a
                            formal lesson, but with a simple, irresistible
                            curiosity. From a young age, I was fascinated by
                            computers and video games, and I spent a lot of my
                            childhood tweaking settings and taking things apart
                            just to understand the logic behind them. This
                            desire to understand has never stopped growing
                            inside me.
                        </p>
                        <p>
                            During my elementary and high school years,
                            mathematics and computer related courses quickly
                            became my favorite. My enthusiasm for the material
                            helped me pick up on new ideas quickly. It was
                            during my college courses that everything really
                            came together. I discovered programming, and for the
                            first time, I wasn't just exploring systems—I was
                            building them. That feeling of writing a line of
                            code and seeing an application respond exactly as
                            intended was empowering, which ended up guiding my
                            focus towards C++, C#, and game development.
                        </p>
                        <p>
                            This initial spark ignited a passion for continuous,
                            self-directed growth. My evenings were often spent
                            immersed in online courses on platforms like Udemy,
                            learning Game Engines like Unity and Unreal Engine,
                            and diving into the intricacies of not just learning
                            a new language, but to master the entire ecosystem
                            around it. This process of constant learning isn't
                            just a hobby; it’s the core of my development
                            philosophy.
                        </p>
                        <p>
                            I have learned technology moves fast, and it's not
                            going to slow down or wait for anyone. A developer
                            not only needs to be adaptable, but also be able to
                            master new technologies quickly. The ability to
                            learn new frameworks, languages, and tools is
                            essential to staying relevant in our modern
                            technology field. I strongly feel that this is my
                            greatest strength as a developer. I thrive on the
                            challenge of learning, and I am always able to pick
                            up new skills extremely quickly. This has allowed me
                            to expand to a wide range of projects types, from
                            Game development, mobile and computer applications,
                            and even web development.
                        </p>
                        <p>
                            This mindset is carried into every project I take
                            on. I feel technology should make things easier and
                            enjoyable for people. Whether I'm building an
                            immersive 3D world or a simple web page, my goal is
                            always to create something that is reliable, runs
                            well, and just makes sense to the person using it.
                        </p>
                    </div>

                    <!-- Right Column: Subtle Divider with Icons (On Larger Screens) -->
                    <div
                        class="hidden h-full flex-col items-end justify-center pt-12 md:flex"
                    >
                        <div class="relative h-full w-px bg-gray-700">
                            <!-- Icon 1: Gaming -->
                            <div
                                class="absolute left-1/2 top-1/4 -translate-x-1/2 rounded-full bg-gray-800 p-3"
                            >
                                <svg
                                    class="h-6 w-6 text-orange-400"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    ><path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75"
                                    ></path></svg
                                >
                            </div>
                            <!-- Icon 2: Coding -->
                            <div
                                class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full bg-gray-800 p-3"
                            >
                                <svg
                                    class="h-6 w-6 text-orange-400"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    ><path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z"
                                    ></path></svg
                                >
                            </div>
                            <!-- Icon 3: Learning -->
                            <div
                                class="absolute left-1/2 top-3/4 -translate-x-1/2 rounded-full bg-gray-800 p-3"
                            >
                                <svg
                                    class="h-6 w-6 text-orange-400"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    ><path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M12 18v-5.25m0 5.25a7.5 7.5 0 001.5-14.95A7.5 7.5 0 0010.5 18M12 18v-5.25"
                                    ></path></svg
                                >
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Final CTA -->
    <section class="bg-black/20 py-20 md:py-24">
        <div class="container mx-auto px-6 text-center">
            <h2
                class="font-poppins mx-auto max-w-2xl text-3xl font-bold text-white md:text-4xl"
            >
                Sound like a good fit?
            </h2>
            <p class="mt-4 text-lg text-gray-400">
                I'm always ready for the next challenge.
            </p>
            <button
                class="open-contact-modal cta-button mt-8 inline-block rounded-full bg-orange-600 px-8 py-3 text-lg font-bold text-white shadow-lg transition-all duration-300 ease-in-out hover:bg-orange-700"
            >
                Let's Get In Touch
            </button>
        </div>
    </section>

    <script>
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault()

                const targetId = anchor.getAttribute('href')
                if (!targetId) return
                const targetElement = document.querySelector(targetId)

                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start',
                    })
                }
            })
        })
    </script>
</Layout>

<style>
    /* ======================================================================
       GRADIENT BACKGROUND EFFECT
       ======================================================================
    */
    .gradient-effect-bg {
        position: relative;
        background-color: #030712;
        /* A dark base color */
        /* THE CHANGE: Added subtle radial gradients for depth */
        background-image:
            radial-gradient(
                ellipse at top,
                rgba(249, 115, 22, 0.1),
                transparent 60%
            ),
            radial-gradient(
                ellipse at bottom,
                rgba(79, 70, 229, 0.1),
                transparent 60%
            );
        overflow: hidden;
    }

    /* ======================================================================
       HERO TEXT EFFECTS
       ======================================================================
    */
    .fade-in-up {
        animation: fadeInUp 1.2s ease-out forwards;
        opacity: 0;
    }

    .fade-in {
        animation: fadeIn 1.2s 0.5s ease-out forwards;
        opacity: 0;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }
</style>

<!-- 

 KEEP FOR LATER: Animated Code Snippet
    <div
        class="font-mono text-sm rounded-lg shadow-2xl overflow-hidden min-h-[400px] lg:mt-4"
    >
        <div class="code-block-header flex items-center p-3">
            <div class="flex space-x-2">
                <div class="w-3 h-3 rounded-full bg-red-500">
                </div>
                <div class="w-3 h-3 rounded-full bg-yellow-500">
                </div>
                <div class="w-3 h-3 rounded-full bg-green-500">
                </div>
            </div>
            <p class="ml-4 text-gray-400">
                StephenSterling.dev
            </p>
        </div>
        <div id="code-block" class="code-block-body p-5">
                JS will populate this 
        </div>
    </div> 

    <script>
            document.addEventListener("DOMContentLoaded", function () {
                const codeBlock = document.getElementById("code-block");
                if (!codeBlock) return;

                const code = [
                    { text: "#include", type: "keyword" },
                    { text: " <", type: "punctuation" },
                    { text: "string", type: "default" },
                    { text: ">\n", type: "punctuation" },
                    { text: "#include", type: "keyword" },
                    { text: " <", type: "punctuation" },
                    { text: "vector", type: "default" },
                    { text: ">\n\n", type: "punctuation" },
                    {
                        text: "// Represents the developer profile\n",
                        type: "comment",
                    },
                    { text: "struct", type: "keyword" },
                    { text: " Developer {\n", type: "default" },
                    { text: "    std::string name = ", type: "default" },
                    { text: '"Stephen Sterling"', type: "string" },
                    { text: ";\n", type: "punctuation" },
                    { text: "    std::string location = ", type: "default" },
                    { text: '"Arkansas, USA"', type: "string" },
                    { text: ";\n\n", type: "punctuation" },
                    {
                        text: "    std::vector<std::string> passions = {\n",
                        type: "default",
                    },
                    { text: "        ", type: "default" },
                    { text: '"Game Development"', type: "string" },
                    { text: ",\n", type: "punctuation" },
                    { text: "        ", type: "default" },
                    { text: '"Problem-Solving"', type: "string" },
                    { text: ",\n", type: "punctuation" },
                    { text: "        ", type: "default" },
                    { text: '"Lifelong Learning"', type: "string" },
                    { text: "\n    };\n\n", type: "punctuation" },
                    { text: "    void ", type: "keyword" },
                    { text: "buildNewThings", type: "function" },
                    { text: "() {\n", type: "punctuation" },
                    { text: "        ", type: "default" },
                    { text: "// The magic happens here.", type: "comment" },
                    { text: "\n    }\n};", type: "punctuation" },
                ];

                let i = 0;
                let currentLine = "";

                function type() {
                    if (!codeBlock) return;
                    if (i >= code.length) {
                        codeBlock.innerHTML = codeBlock.innerHTML.replace(
                            '<span class="typing-cursor">&nbsp;</span>',
                            "",
                        );
                        return;
                    }

                    const segment = code[i];
                    let charIndex = 0;

                    function typeChar() {
                        if (charIndex < segment.text.length) {
                            if (charIndex === 0)
                                currentLine += `<span class="token ${segment.type}">`;
                            currentLine +=
                                segment.text[charIndex] === "\n"
                                    ? "<br/>"
                                    : segment.text[charIndex];
                            if (codeBlock) {
                                codeBlock.innerHTML =
                                    currentLine.replace(/\n/g, "<br/>") +
                                    '<span class="typing-cursor">&nbsp;</span>';
                            }
                            charIndex++;
                            setTimeout(typeChar, 25 + Math.random() * 40);
                        } else {
                            currentLine += "</span>";
                            i++;
                            setTimeout(type, 25 + Math.random() * 40);
                        }
                    }
                    typeChar();
                }

                const observer = new IntersectionObserver(
                    (entries) => {
                        if (entries[0].isIntersecting) {
                            type();
                            observer.disconnect();
                        }
                    },
                    { threshold: 0.6 },
                );

                observer.observe(codeBlock);
            });
        </script>
                    
-->
